// Firestore Security Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ---- Common helpers ---- */
    function signedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return signedIn() && request.auth.uid == uid;
    }

    function validType(t) {
      // CATEGORY_MODEL.types ⇒ 'shorts' | 'video'
      return t is string && (t == 'shorts' || t == 'video');
    }

    function validYouTubeUrl(u) {
      // https://youtu.be/...  |  https://www.youtube.com/watch?v=... | /shorts/...
      return u is string
             && u.size() >= 12
             && u.size() <= 500
             && u.matches('^https://(www\\.)?(youtube\\.com/(watch\\?v=|shorts/)|youtu\\.be/)[^\\s]+$');
    }

    function validTitle(t) {
      return t is string && t.size() > 0 && t.size() <= 200;
    }

    function validCategories(cats) {
      // 리스트/최대 25개만 강제 (개별 값 화이트리스트는 클라이언트에서 관리)
      return cats is list && cats.size() <= 25;
    }

    function validThumb(th) {
      return !( 'thumbnail' in request.resource.data ) ||
             ( request.resource.data.thumbnail is string && request.resource.data.thumbnail.size() <= 500 );
    }

    function validCreatedAt(ts) {
      // createdAt 은 과거 1년 ~ 현재 + 5분 버퍼 내
      return ts is timestamp
             && ts >= request.time - duration.value(365, 'd')
             && ts <= request.time + duration.value(5, 'm');
    }

    /* =========================
       videos/{id}
       - 공개 읽기
       - 생성/수정/삭제는 소유자만
       - 필드/타입/길이 검증
       ========================= */
    match /videos/{id} {
      allow read: if true;

      allow create: if signedIn()
        && isOwner(request.resource.data.ownerUid)
        && validType(request.resource.data.type)
        && validYouTubeUrl(request.resource.data.url)
        && validTitle(request.resource.data.title)
        && validCategories(request.resource.data.categories)
        && validThumb(request.resource.data.thumbnail)
        && validCreatedAt(request.resource.data.createdAt)
        // 허용 필드만 쓰도록 제한(원하면 목록에 추가)
        && request.resource.data.keys().hasOnly([
          'type','url','title','categories','thumbnail',
          'ownerUid','createdAt'
        ]);

      allow update: if signedIn()
        && isOwner(resource.data.ownerUid) // 소유자만 수정
        // ownerUid/createdAt은 불변
        && request.resource.data.ownerUid == resource.data.ownerUid
        && request.resource.data.createdAt == resource.data.createdAt
        // 나머지 유효성
        && validType(request.resource.data.type)
        && validYouTubeUrl(request.resource.data.url)
        && validTitle(request.resource.data.title)
        && validCategories(request.resource.data.categories)
        && validThumb(request.resource.data.thumbnail)
        && request.resource.data.keys().hasOnly([
          'type','url','title','categories','thumbnail',
          'ownerUid','createdAt'
        ]);

      allow delete: if signedIn() && isOwner(resource.data.ownerUid);
    }

    /* =========================
       users/{uid}
       - 공개 읽기(닉/표시명 등)
       - 본인만 생성/수정/삭제
       - 민감/권한 필드 차단
       ========================= */
    match /users/{uid} {
      allow read: if true;

      allow create: if signedIn()
        && request.auth.uid == uid
        && request.resource.data.keys().hasOnly([
          'nickname','displayName','photoURL','createdAt','updatedAt'
        ])
        && ( !('nickname'    in request.resource.data) || (request.resource.data.nickname    is string && request.resource.data.nickname.size()    <= 50) )
        && ( !('displayName' in request.resource.data) || (request.resource.data.displayName is string && request.resource.data.displayName.size() <= 50) )
        && ( !('photoURL'    in request.resource.data) || (request.resource.data.photoURL    is string && request.resource.data.photoURL.size()    <= 500) )
        && ( !('createdAt'   in request.resource.data) ||  request.resource.data.createdAt   is timestamp )
        && ( !('updatedAt'   in request.resource.data) ||  request.resource.data.updatedAt   is timestamp );

      allow update: if signedIn()
        && request.auth.uid == uid
        && request.resource.data.keys().hasOnly([
          'nickname','displayName','photoURL','updatedAt'
        ])
        && ( !('nickname'    in request.resource.data) || (request.resource.data.nickname    is string && request.resource.data.nickname.size()    <= 50) )
        && ( !('displayName' in request.resource.data) || (request.resource.data.displayName is string && request.resource.data.displayName.size() <= 50) )
        && ( !('photoURL'    in request.resource.data) || (request.resource.data.photoURL    is string && request.resource.data.photoURL.size()    <= 500) )
        && ( !('updatedAt'   in request.resource.data) ||  request.resource.data.updatedAt   is timestamp );

      allow delete: if signedIn() && request.auth.uid == uid;
    }

    /* (선택) 기타 공개 페이지용 설정 컬렉션이 있다면 읽기만 허용하고 쓰기는 금지
    match /config/{doc} {
      allow read: if true;
      allow write: if false;
    }
    */
  }
}
